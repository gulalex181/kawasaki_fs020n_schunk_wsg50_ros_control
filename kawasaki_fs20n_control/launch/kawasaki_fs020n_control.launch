<launch>

    <!-- Params for ZED camera -->
    <!-- <arg name="svo_file" default="path/to/svo/file.svo"> -->
    <arg name="svo_file"             default="" />
    <!-- <arg name="stream" default="<ip_address>:<port>"> -->
    <arg name="stream"               default="94.231.166.193:30000" />
    <arg name="camera_model"         default="zed" />
    <arg name="node_name"            default="zed_node" />
    <arg name="publish_urdf"         default="false" />
    <arg name="camera_name"          default="zed" />
    <arg name="base_frame"           default="palm_link" />

    <!-- Position respect to base frame -->
    <arg name="cam_pos_x"            default="0.0" />
    <arg name="cam_pos_y"            default="0.06" />
    <arg name="cam_pos_z"            default="0.05" />
    <arg name="cam_roll"             default="1.57" />
    <arg name="cam_pitch"            default="-1.57" />
    <arg name="cam_yaw"              default="0.0" />


    <!-- Run gripper emulator -->
    <!-- <node pkg="aliencontrol" type="aliencontrol" name="aliencontrol_top">
        <param name="cmd" value="'$(find kawasaki_fs20n_control)/gripper_server_emulator'" />
    </node> -->

    <!-- Load the URDF to the parameter server -->
    <param
        name="robot_description"
        command="$(find xacro)/xacro '$(find robotic_system_description)/urdf/robotic_system.urdf.xacro'
                camera_name:=$(arg camera_name)
                camera_model:=$(arg camera_model)
                base_frame:=$(arg base_frame)
                cam_pos_x:=$(arg cam_pos_x)
                cam_pos_y:=$(arg cam_pos_y)
                cam_pos_z:=$(arg cam_pos_z)
                cam_roll:=$(arg cam_roll)
                cam_pitch:=$(arg cam_pitch)
                cam_yaw:=$(arg cam_yaw)"
    />

    <!-- Launch RViz -->
    <node
        pkg="rviz"
        type="rviz"
        name="rviz"
        args="-d $(find kawasaki_fs20n_control)/config/rviz_config.rviz"
    />
    <!-- <node
        pkg="rviz"
        type="rviz"
        name="rviz"
        args="-d $(find kawasaki_fs20n_control)/config/rviz_config_with_camera.rviz"
    /> -->

    <!-- Load controller settings to the parameter server -->
    <rosparam
        file="$(find kawasaki_fs20n_control)/config/kawasaki_fs20n_controllers.yaml"
        command="load"
    />

    <!-- Load settings to the parameter server -->
    <rosparam
        file="$(find kawasaki_fs20n_control)/config/settings.yaml"
        command="load"
    />

    <!-- Load schunk wsg50 settings to the parameter server -->
    <rosparam
        file="$(find kawasaki_fs20n_control)/config/schunk_wsg50_settings.yaml"
        command="load"
    />

    <!-- Run hardware interface -->
    <node
        pkg="kawasaki_fs20n_control"
        type="kawasaki_fs20n_hw_main"
        name="kawasaki_fs20n_hw_interface"
        respawn="false"
        output="screen"
    />
    
    <!-- Run controller manager -->
    <node
        pkg="controller_manager"
        type="controller_manager"
        name="ros_control_controller_manager"
        respawn="false"
        output="screen"
        args="spawn 
            joint_state_controller
            manipulator_controller
            gripper_controller
        "
    />

    <!-- Run converter of joint states to /tf tranforms -->
    <!-- It will subscribe to the output of joint_state_controller and will update transformation tree dynamically -->
    <node
        pkg="robot_state_publisher"
        type="robot_state_publisher"
        name="robot_state_publisher"
        respawn="true"
    />
    
    <!-- Run MoveIt -->
    <include file="$(find kawasaki_fs020n_schunk_wsg_50_moveit)/launch/move_group.launch">
        <arg name="allow_trajectory_execution" value="true"/>
        <!-- About simple, ros_control and fake moveit controller manager you can read here: -->
        <!-- https://ros-planning.github.io/moveit_tutorials/doc/controller_configuration/controller_configuration_tutorial.html#example-controller-manager -->
        <arg name="moveit_controller_manager" value="ros_control" />
        <arg name="info" value="true"/>
        <arg name="pipeline" value="ompl"/>
        <arg name="load_robot_description" value="true"/>
    </include>

    <!-- Run schunk wsg50 driver -->
    <node name="wsg50_driver"  pkg="wsg50_driver" type="wsg50" output="screen" />

    <!-- Run ZED camera -->
    <!-- <include file="$(find zed_wrapper)/launch/$(arg camera_model).launch">
        <arg name="svo_file"            value="$(arg svo_file)" />
        <arg name="stream"              value="$(arg stream)" />
        <arg name="camera_model"        value="$(arg camera_model)" />
        <arg name="node_name"           value="$(arg node_name)" />
        <arg name="publish_urdf"        value="$(arg publish_urdf)" />
        <arg name="camera_name"         value="$(arg camera_name)" />
        <arg name="base_frame"          value="$(arg base_frame)" />
        <arg name="cam_pos_x"           value="$(arg cam_pos_x)" />
        <arg name="cam_pos_y"           value="$(arg cam_pos_y)" />
        <arg name="cam_pos_z"           value="$(arg cam_pos_z)" />
        <arg name="cam_roll"            value="$(arg cam_roll)" />
        <arg name="cam_pitch"           value="$(arg cam_pitch)" />
        <arg name="cam_yaw"             value="$(arg cam_yaw)" />
    </include> -->

</launch>